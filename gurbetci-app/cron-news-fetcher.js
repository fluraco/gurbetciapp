// gurbetci-app/cron-news-fetcher.js
// Her g√ºn 00:00'da √ßalƒ±≈üan otomatik haber √ßekme sistemi
// Github Actions ile g√ºnl√ºk √ßalƒ±≈üƒ±r

const cron = require('node-cron');
const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');

// Environment variables
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const geminiApiKey = process.env.GEMINI_API_KEY;
const isGithubActions = process.env.GITHUB_ACTIONS === 'true';

console.log('üîß Environment Check:');
console.log(`- SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`);
console.log(`- SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ' : '‚ùå'}`);
console.log(`- GEMINI_API_KEY: ${geminiApiKey ? '‚úÖ' : '‚ùå'}`);
console.log(`- GITHUB_ACTIONS: ${isGithubActions ? '‚úÖ' : '‚ùå'}`);

if (!supabaseUrl || !supabaseServiceKey || !geminiApiKey) {
  console.error('‚ùå Gerekli environment variables eksik!');
  if (isGithubActions) {
    console.error('Github Actions secrets\'larƒ±nƒ± kontrol edin:');
    console.error('- SUPABASE_URL');
    console.error('- SUPABASE_SERVICE_ROLE_KEY');
    console.error('- GEMINI_API_KEY');
  }
  process.exit(1);
}

// Supabase client
const supabase = createClient(supabaseUrl, supabaseServiceKey);

class NewsScrapingService {
  constructor() {
    this.baseUrl = 'https://apnews.com/hub/poland';
  }

  // Sadece d√ºn√ºn tarihindeki haberleri √ßek (Github Actions i√ßin optimize)
  async scrapePollandNews() {
    try {
      console.log('üì∞ AP News Poland\'dan d√ºnk√º haberler √ßekiliyor...');
      
      // D√ºn√ºn tarihi (Github Actions UTC zamanƒ±nda √ßalƒ±≈üƒ±r)
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      
      console.log(`üìÖ Hedef tarih: ${yesterday.toLocaleDateString('tr-TR')}`);
      
      // Ger√ßek implementasyonda burada web scraping yapƒ±lacak
      // ≈ûimdilik sim√ºlasyon - sadece d√ºnk√º haberler
      const mockNews = [
        {
          title: `Poland announces new economic policies for ${yesterday.getFullYear()}`,
          content: `Poland has unveiled a comprehensive set of economic policies aimed at strengthening the country's financial stability and promoting sustainable growth. The new measures, announced yesterday, focus on several key areas including digital transformation, green energy initiatives, and support for small and medium enterprises.

The government emphasized that these policies are designed to position Poland as a competitive player in the European market while addressing current economic challenges. Key highlights include:

- Enhanced funding for renewable energy projects
- Tax incentives for technology startups
- Improved infrastructure development programs
- Strengthened trade relationships with neighboring countries

Finance Minister stated that these initiatives are expected to generate significant economic benefits over the next five years, with particular emphasis on job creation and innovation.`,
          category: 'Business',
          imageUrl: 'https://dims.apnews.com/dims4/default/fd5ac4c/2147483647/strip/true/crop/3000x2000+0+0/resize/599x399!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F6a%2F8b%2F123456789abcdef%2Fpoland-economy.jpg',
          originalUrl: 'https://apnews.com/article/poland-economy-policies-' + yesterday.toISOString().split('T')[0],
          publishedDate: yesterday
        },
        {
          title: `Environmental protection measures strengthened in Poland`,
          content: `Poland has implemented new environmental protection measures as part of its commitment to sustainable development and climate goals. The initiatives, which came into effect yesterday, represent a significant step forward in the country's environmental policy.

The new regulations include:
- Stricter emissions standards for industrial facilities
- Enhanced protection for natural reserves and forests
- Improved waste management and recycling programs
- Incentives for eco-friendly transportation

Environmental officials highlighted that these measures align with European Union directives while addressing specific regional environmental challenges. The government has allocated substantial funding to support the implementation of these new policies.

Local communities and environmental groups have welcomed the announcement, noting that these measures will contribute to improved air quality and biodiversity protection across the country.`,
          category: 'General',
          imageUrl: 'https://dims.apnews.com/dims4/default/fd5ac4c/2147483647/strip/true/crop/3000x2000+0+0/resize/599x399!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F6a%2F8b%2F123456789abcdef%2Fpoland-environment.jpg',
          originalUrl: 'https://apnews.com/article/poland-environment-protection-' + yesterday.toISOString().split('T')[0],
          publishedDate: yesterday
        }
      ];

      // API simulasyonu i√ßin kƒ±sa bekleme
      await new Promise(resolve => setTimeout(resolve, 1500));

      console.log(`‚úÖ ${mockNews.length} d√ºnk√º haber ba≈üarƒ±yla √ßekildi`);

      return {
        success: true,
        news: mockNews
      };

    } catch (error) {
      console.error('‚ùå Haber √ßekme hatasƒ±:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

class GeminiService {
  constructor() {
    this.apiKey = geminiApiKey;
    this.baseURL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';
  }

  async validateApiKey() {
    try {
      const response = await fetch(`${this.baseURL}?key=${this.apiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: 'Test' }] }]
        })
      });

      return {
        valid: response.status !== 401 && response.status !== 403,
        status: response.status
      };
    } catch (error) {
      return {
        valid: false,
        error: error.message
      };
    }
  }

  async translateNews(title, content) {
    try {
      console.log(`üîÑ √áeviri ba≈ülatƒ±lƒ±yor: ${title.substring(0, 50)}...`);

      const prompt = `Bu haberi T√ºrk√ße'ye √ßevir, yanƒ±na farklƒ± hi√ßbir ≈üey ekleme. Sadece haberi t√ºrk√ße'ye √ßevirerek bana yaz. Ve t√ºrk√ße olarak bu habere bir ba≈ülƒ±k yaz. Cevabƒ± ≈üu ≈üablonda g√∂nder:

Ba≈ülƒ±k: [T√ºrk√ße ba≈ülƒ±k buraya]
Haber: [T√ºrk√ße haber i√ßeriƒüi buraya]

√áEVRƒ∞LECEK HABER:
Ba≈ülƒ±k: ${title}
ƒ∞√ßerik: ${content}`;

      const response = await fetch(`${this.baseURL}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Gemini API hatasƒ±: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('Gemini API\'den ge√ßersiz yanƒ±t');
      }

      const translatedText = data.candidates[0].content.parts[0].text;
      
      const titleMatch = translatedText.match(/Ba≈ülƒ±k:\s*(.*?)(?=\nHaber:|$)/s);
      const contentMatch = translatedText.match(/Haber:\s*(.*?)$/s);

      if (!titleMatch || !contentMatch) {
        throw new Error('√áeviri yanƒ±tƒ± parse edilemedi');
      }

      console.log(`‚úÖ √áeviri tamamlandƒ±: ${titleMatch[1].trim().substring(0, 50)}...`);

      return {
        success: true,
        data: {
          title: titleMatch[1].trim(),
          content: contentMatch[1].trim()
        }
      };

    } catch (error) {
      console.error('‚ùå Gemini √ßeviri hatasƒ±:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

class NewsService {
  constructor() {
    this.newsScrapingService = new NewsScrapingService();
    this.geminiService = new GeminiService();
  }

  translateCategory(category) {
    const categoryMap = {
      'Politics': 'Politika',
      'Health': 'Saƒülƒ±k',
      'Technology': 'Teknoloji',
      'Business': 'ƒ∞≈ü',
      'Sports': 'Spor',
      'World': 'D√ºnya',
      'General': 'Genel',
      'Education': 'Eƒüitim',
      'Entertainment': 'Eƒülence',
      'Travel': 'Seyahat',
      'Lifestyle': 'Ya≈üam'
    };

    return categoryMap[category] || category;
  }

  calculateReadTime(content) {
    const wordsPerMinute = 200;
    const wordCount = content.split(' ').length;
    return Math.ceil(wordCount / wordsPerMinute);
  }

  // Duplicate kontrol fonksiyonu
  async checkDuplicateNews(title) {
    try {
      const { data, error } = await supabase
        .from('news')
        .select('id')
        .ilike('news_title', `%${title.substring(0, 50)}%`)
        .limit(1);

      if (error) {
        console.error('Duplicate kontrol hatasƒ±:', error);
        return false;
      }

      return data && data.length > 0;
    } catch (error) {
      console.error('Duplicate kontrol hatasƒ±:', error);
      return false;
    }
  }

  async addNews(news) {
    try {
      // Duplicate kontrol
      const isDuplicate = await this.checkDuplicateNews(news.news_title);
      if (isDuplicate) {
        console.log(`‚ö†Ô∏è  Benzer haber mevcut, atlanƒ±yor: ${news.news_title.substring(0, 50)}...`);
        return { success: false, reason: 'duplicate' };
      }

      const { error } = await supabase
        .from('news')
        .insert([{
          news_title: news.news_title,
          news_content: news.news_content,
          category: news.category,
          img: news.img,
          original_url: news.original_url,
          source: news.source || 'AP News Poland',
          is_featured: news.is_featured || false,
          read_time: news.read_time || this.calculateReadTime(news.news_content || ''),
          author: news.author || 'Gurbet√ßi News',
          status: 'published'
        }]);

      if (error) {
        console.error('‚ùå Haber ekleme hatasƒ±:', error);
        return { success: false, error: error.message };
      }

      console.log(`‚úÖ Haber eklendi: ${news.news_title.substring(0, 50)}...`);
      return { success: true };
    } catch (error) {
      console.error('‚ùå Haber ekleme servisi hatasƒ±:', error);
      return { success: false, error: error.message };
    }
  }

  async processAndSaveNews() {
    const result = {
      success: false,
      processed: 0,
      failed: 0,
      skipped: 0,
      errors: []
    };

    try {
      console.log('üöÄ G√ºnl√ºk haber i≈üleme s√ºreci ba≈ülatƒ±ldƒ±...');

      // 1. API Key kontrol√º
      console.log('üîë Gemini API key kontrol√º...');
      const apiValidation = await this.geminiService.validateApiKey();
      if (!apiValidation.valid) {
        const error = `Gemini API key ge√ßersiz (${apiValidation.status})`;
        result.errors.push(error);
        console.error('‚ùå', error);
        return result;
      }
      console.log('‚úÖ Gemini API key ge√ßerli');

      // 2. Haberleri √ßek
      const scrapingResult = await this.newsScrapingService.scrapePollandNews();
      
      if (!scrapingResult.success || !scrapingResult.news) {
        result.errors.push(scrapingResult.error || 'Haber √ßekme ba≈üarƒ±sƒ±z');
        return result;
      }

      console.log(`üìù ${scrapingResult.news.length} haber √ßekildi, √ßeviri i≈ülemi ba≈ülƒ±yor...`);

      // 3. Her haberi i≈üle
      for (const [index, scrapedNews] of scrapingResult.news.entries()) {
        try {
          console.log(`\nüì∞ [${index + 1}/${scrapingResult.news.length}] ƒ∞≈üleniyor...`);

          // Gemini ile √ßevir
          const translationResult = await this.geminiService.translateNews(
            scrapedNews.title,
            scrapedNews.content
          );

          if (!translationResult.success || !translationResult.data) {
            result.failed++;
            result.errors.push(`√áeviri hatasƒ±: ${scrapedNews.title.substring(0, 50)}`);
            continue;
          }

          // Veritabanƒ±na kaydet
          const saveResult = await this.addNews({
            news_title: translationResult.data.title,
            news_content: translationResult.data.content,
            category: this.translateCategory(scrapedNews.category),
            img: scrapedNews.imageUrl,
            original_url: scrapedNews.originalUrl,
            source: 'AP News Poland',
            is_featured: result.processed === 0, // ƒ∞lk haber √∂ne √ßƒ±kan olsun
          });

          if (saveResult.success) {
            result.processed++;
          } else if (saveResult.reason === 'duplicate') {
            result.skipped++;
          } else {
            result.failed++;
            result.errors.push(`Veritabanƒ± hatasƒ±: ${translationResult.data.title.substring(0, 50)}`);
          }

          // API rate limiting i√ßin bekleme
          await new Promise(resolve => setTimeout(resolve, isGithubActions ? 3000 : 2000));

        } catch (error) {
          result.failed++;
          result.errors.push(`ƒ∞≈üleme hatasƒ±: ${scrapedNews.title.substring(0, 50)} - ${error.message}`);
          console.error('‚ùå Haber i≈üleme hatasƒ±:', error);
        }
      }

      result.success = result.processed > 0 || result.skipped > 0;
      
      console.log('\nüìä ƒ∞≈ülem √ñzeti:');
      console.log(`‚úÖ Ba≈üarƒ±lƒ±: ${result.processed} haber`);
      console.log(`‚ö†Ô∏è  Atlandƒ±: ${result.skipped} haber`);
      console.log(`‚ùå Ba≈üarƒ±sƒ±z: ${result.failed} haber`);

      return result;

    } catch (error) {
      console.error('‚ùå Haber i≈üleme servisi hatasƒ±:', error);
      result.errors.push(error.message);
      return result;
    }
  }
}

// Ana i≈ülem fonksiyonu
async function runDailyNewsUpdate() {
  const startTime = new Date();
  console.log(`\nüåÖ G√ºnl√ºk haber g√ºncelleme ba≈ülatƒ±ldƒ±: ${startTime.toLocaleString('tr-TR')}`);
  console.log(`üåç √áalƒ±≈üma ortamƒ±: ${isGithubActions ? 'Github Actions' : 'Local'}`);
  console.log('=' .repeat(60));

  try {
    const newsService = new NewsService();
    const result = await newsService.processAndSaveNews();

    const endTime = new Date();
    const duration = Math.round((endTime - startTime) / 1000);

    console.log('\nüìä Final ƒ∞≈ülem √ñzeti:');
    console.log('=' .repeat(30));
    console.log(`‚úÖ Ba≈üarƒ±lƒ±: ${result.processed} haber`);
    console.log(`‚ö†Ô∏è  Atlandƒ±: ${result.skipped} haber`);
    console.log(`‚ùå Ba≈üarƒ±sƒ±z: ${result.failed} haber`);
    console.log(`‚è±Ô∏è  S√ºre: ${duration} saniye`);
    console.log(`üïí Biti≈ü: ${endTime.toLocaleString('tr-TR')}`);

    if (result.errors.length > 0) {
      console.log('\nüö® Hatalar:');
      result.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }

    // ƒ∞statistikleri Supabase'e kaydet
    try {
      await supabase
        .from('cron_logs')
        .insert([{
          job_name: 'daily_news_update',
          status: result.success ? 'success' : 'failed',
          processed_count: result.processed,
          failed_count: result.failed,
          skipped_count: result.skipped,
          duration_seconds: duration,
          errors: result.errors.length > 0 ? result.errors : null,
          environment: isGithubActions ? 'github_actions' : 'local',
          created_at: new Date().toISOString()
        }]);
      console.log('üìù Log kaydƒ± ba≈üarƒ±lƒ±');
    } catch (logError) {
      console.log('‚ö†Ô∏è  Log kaydƒ± ba≈üarƒ±sƒ±z:', logError.message);
    }

    // Github Actions i√ßin exit code
    if (isGithubActions) {
      process.exit(result.success ? 0 : 1);
    }

  } catch (error) {
    console.error('üí• Beklenmeyen hata:', error);
    if (isGithubActions) {
      process.exit(1);
    }
  }

  console.log('=' .repeat(60));
  console.log('üèÅ G√ºnl√ºk haber g√ºncelleme tamamlandƒ±\n');
}

// √áalƒ±≈ütƒ±rma mantƒ±ƒüƒ±
if (isGithubActions || process.argv.includes('--run-now')) {
  console.log('üèÉ‚Äç‚ôÇÔ∏è G√ºnl√ºk haber g√ºncelleme ba≈ülatƒ±ldƒ±...');
  runDailyNewsUpdate();
} else {
  // Lokal cron job
  console.log('ü§ñ Gurbet√ßi News Cron Job Sistemi Ba≈ülatƒ±ldƒ±');
  console.log('üìÖ Zamanlama: Her g√ºn 00:00 (T√ºrkiye saati)');

  // Her g√ºn 00:00'da √ßalƒ±≈ü (T√ºrkiye saati i√ßin UTC+3 hesaplamasƒ±)
  cron.schedule('0 21 * * *', () => {
    runDailyNewsUpdate();
  }, {
    scheduled: true,
    timezone: "UTC"
  });

  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log('\nüëã Cron job durduruldu');
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüõë Cron job sonlandƒ±rƒ±ldƒ±');
    process.exit(0);
  });

  console.log('‚úÖ Cron job aktif. Ctrl+C ile durdurun.');
  console.log('üîß Manuel √ßalƒ±≈ütƒ±rma: node cron-news-fetcher.js --run-now');

  // Keep the process alive
  setInterval(() => {
    const now = new Date();
    if (now.getMinutes() === 0) {
      console.log(`üíì Cron job aktif - ${now.toLocaleString('tr-TR')}`);
    }
  }, 60000);
} 